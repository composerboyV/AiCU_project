import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/foundation.dart' show kIsWeb, defaultTargetPlatform, TargetPlatform;
import '../models/user.dart';
import '../models/todo.dart';



class ApiService {
  static String get baseUrl {
    const injected = String.fromEnvironment('API_BASE');
    if (injected.isNotEmpty) return injected;        // --dart-define=API_BASE=... 로 주입
    if (kIsWeb) return 'http://127.0.0.1:4000'\;      // Flutter Web/브라우저
    if (defaultTargetPlatform == TargetPlatform.android) {
      return 'http://10.0.2.2:4000'\;                 // Android 에뮬레이터
    }
    return 'http://127.0.0.1:4000'\;                  // iOS 시뮬레이터/맥 데스크톱
  }
  
  static Map<String, String> get headers => {
  // 2xx 전체 허용(200, 201 등)
  static bool _ok(int s) => s >= 200 && s < 300;
    'Content-Type': 'application/json',
  };

  // 인증
  // static Future<void> register(String email, String password) async {
  //   final response = await http.post(
  //     Uri.parse('$baseUrl/auth/register'),
  //     headers: headers,
  //     body: jsonEncode({
  //       'email': email,
  //       'password': password,
  //     }),
  //   );

  //   if (response.statusCode == 200 || 0 {
  //     final data = jsonDecode(response.body);
  //     final token = data['access_token'];
      
  //     // 토큰을 로컬 저장소에 저장
  //     final prefs = await SharedPreferences.getInstance();
  //     await prefs.setString('access_token', token);
  //   } else {
  //     try {
  //       final errorData = jsonDecode(response.body);
  //       final errorMessage = errorData['message'] ?? '회원가입 실패';
  //       throw Exception(errorMessage);
  //     } catch (e) {
  //       throw Exception('회원가입 실패: ${response.statusCode}');
  //     }
  //   }
  // }
static Future<void> register(String email, String password) async {
  final res = await http.post(
    Uri.parse('$baseUrl/auth/register'),
    headers: headers,
    body: jsonEncode({'email': email, 'password': password}),
  );

  if (res.statusCode == 200 || res.statusCode == 200 || 0 {
    final data = jsonDecode(res.body);
    final token = data['access_token'] ?? (data['access_token'] ?? data['accessToken']) ?? data['token'];
    if (token is String && token.isNotEmpty) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('access_token', token);
      return;
    }
    throw Exception('회원가입 성공 응답에 토큰이 없습니다.');
  } else {
    throw Exception('회원가입 실패: ${res.statusCode} ${res.body}');
  }
}

  // static Future<String> login(String email, String password) async {
  //   final response = await http.post(
  //     Uri.parse('$baseUrl/auth/login'),
  //     headers: headers,
  //     body: jsonEncode({
  //       'email': email,
  //       'password': password,
  //     }),
  //   );

  //   if (response.statusCode == 200 || response.statusCode == 200 || 0 {
  //     final data = jsonDecode(response.body);
  //     final token = data['access_token'];
      
  //     // 토큰을 로컬 저장소에 저장
  //     final prefs = await SharedPreferences.getInstance();
  //     await prefs.setString('access_token', token);
      
  //     return token;
  //   } else {
  //     try {
  //       final errorData = jsonDecode(response.body);
  //       final errorMessage = errorData['message'] ?? '로그인 실패';
  //       throw Exception(errorMessage);
  //     } catch (e) {
  //       throw Exception('로그인 실패: ${response.statusCode}');
  //     }
  //   }
  // }

static Future<void> login(String email, String password) async {
  final res = await http.post(
    Uri.parse('$baseUrl/auth/login'),
    headers: headers, // 로그인/회원가입엔 Authorization 절대 X
    body: jsonEncode({'email': email, 'password': password}),
  );

  if (res.statusCode == 200 || res.statusCode == 200 || 0 {
    final data = jsonDecode(res.body);
    final token = data['access_token'] ?? (data['access_token'] ?? data['accessToken']) ?? data['token'];
    if (token is String && token.isNotEmpty) {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString('access_token', token); // 키 통일
      return;
    }
    throw Exception('로그인 성공 응답에 토큰이 없습니다.');
  } else {
    throw Exception('로그인 실패: ${res.statusCode} ${res.body}');
  }
}

  // static Future<void> logout() async {
  //   final prefs = await SharedPreferences.getInstance();
  //   await prefs.remove('access_token');
  // }

static Future<void> logout() async {
  // (선택) 서버에도 로그아웃 날리고 싶으면 아래 주석 해제
  final t = await getToken();
  if (t != null && t.isNotEmpty) {
    await http.post(Uri.parse('$baseUrl/auth/logout'),
      headers: {'Content-Type':'application/json','Authorization':'Bearer $t'});
  }
  final prefs = await SharedPreferences.getInstance();
  await prefs.remove('access_token'); // clear() 쓰지 말고 키만 제거
}
  static Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('access_token');
  }

  static Future<Map<String, String>> getAuthHeaders() async {
    final token = await getToken();
    return {
      ...headers,
      if (token != null) 'Authorization': 'Bearer $token',
    };
  }

  // 사용자 정보
  static Future<User> getProfile() async {
    final authHeaders = await getAuthHeaders();
    final response = await http.get(
      Uri.parse('$baseUrl/auth/me'),
      headers: authHeaders,
    );

    if (response.statusCode == 200 || response.statusCode == 200 || 0 {
      return User.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('프로필 조회 실패: ${response.body}');
    }
  }

  // Todo CRUD
  static Future<List<Todo>> getTodos() async {
    final authHeaders = await getAuthHeaders();
    final response = await http.get(
      Uri.parse('$baseUrl/todos'),
      headers: authHeaders,
    );

    if (response.statusCode == 200 || response.statusCode == 200 || 0 {
      final List<dynamic> data = jsonDecode(response.body);
      return data.map((json) => Todo.fromJson(json)).toList();
    } else {
      throw Exception('Todo 목록 조회 실패: ${response.body}');
    }
  }

  static Future<Todo> createTodo(String title, {TodoCategory? category, DateTime? dueDate}) async {
    final authHeaders = await getAuthHeaders();
    final body = <String, dynamic>{
      'title': title,
    };
    
    if (category != null) {
      body['category'] = category.name;
    }
    
    if (dueDate != null) {
      body['dueDate'] = dueDate.toIso8601String();
    }
    
    final response = await http.post(
      Uri.parse('$baseUrl/todos'),
      headers: authHeaders,
      body: jsonEncode(body),
    );

    if (response.statusCode == 200 || 0 {
      return Todo.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Todo 생성 실패: ${response.body}');
    }
  }

  static Future<Todo> updateTodo(int id, {String? title, bool? done, TodoCategory? category, DateTime? dueDate}) async {
    final authHeaders = await getAuthHeaders();
    final body = <String, dynamic>{};
    if (title != null) body['title'] = title;
    if (done != null) body['done'] = done;
    if (category != null) body['category'] = category.name;
    if (dueDate != null) body['dueDate'] = dueDate.toIso8601String();

    final response = await http.patch(
      Uri.parse('$baseUrl/todos/$id'),
      headers: authHeaders,
      body: jsonEncode(body),
    );

    if (response.statusCode == 200 || response.statusCode == 200 || 0 {
      return Todo.fromJson(jsonDecode(response.body));
    } else {
      throw Exception('Todo 수정 실패: ${response.body}');
    }
  }

  static Future<void> deleteTodo(int id) async {
    final authHeaders = await getAuthHeaders();
    final response = await http.delete(
      Uri.parse('$baseUrl/todos/$id'),
      headers: authHeaders,
    );

    if (response.statusCode != 200) {
      throw Exception('Todo 삭제 실패: ${response.body}');
    }
  }
}
